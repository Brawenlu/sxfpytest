{"name": "test_login_daiban", "status": "broken", "statusDetails": {"message": "ValueError: stat: path too long for Windows", "trace": "self = <test_pytest.test_daiban.Testdaiban object at 0x000000000389A550>\n\n    @allure.story(\"使用获取到的cookie进行登录\")\n    \n    def test_login_daiban(self):\n        time.sleep(3)\n        s = requests.session()  #:维持会话,可以让我们在跨请求时保存某些参数\n        jar=RequestsCookieJar()  #设置cookie，用来获取cookie\n        with open(\"daiban.yml\") as f:\n            self.cookies = yaml.safe_load(f)\n        for cookie in self.cookies:\n            self.driver.add_cookie(cookie)\n            jar.set(cookie['name'],cookie['value'])  #通过selenium来获取cookie\n        print(jar)\n        time.sleep(2)\n        self.driver.get(\"http://bpmmarket.sangfor.com/Home/Index\")\n        self.driver.refresh()\n        self.driver.implicitly_wait(3)\n        time.sleep(3)\n        self.driver.get_screenshot_as_file(\"./daiban.png\")  #获取图片到本地\n        allure.attach.file(\"./daiban.png\",name=\"登陆后截图\",attachment_type=allure.attachment_type.JPG)\n        self.res = s.get(url=\"http://bpmmarket.sangfor.com/DataList/DZ_RJDZDataList\",cookies=jar)   #session用来get会话\n        # self.driver.get_screenshot_as_file(\"./daiban2.png\")\n        # allure.attach.file(\"./daiban2.png\",name=\"点击定制待办的截图\",attachment_type=allure.attachment_type.JPG)\n        time.sleep(5)\n        print(self.res.text)\n>       allure.attach.file(self.res.text,attachment_type=allure.attachment_type.TEXT)\n\ntest_daiban.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\allure_commons\\_allure.py:182: in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pluggy\\manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\allure_pytest\\listener.py:226: in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\allure_commons\\reporter.py:114: in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pluggy\\manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\allure_commons\\logger.py:53: in report_attached_file\n    shutil.copy2(source, destination)\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\shutil.py:257: in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\shutil.py:103: in copyfile\n    if _samefile(src, dst):\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\shutil.py:88: in _samefile\n    return os.path.samefile(src, dst)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nf1 = '\\r\\n<!DOCTYPE html>\\r\\n<html>\\r\\n<head>\\r\\n    <meta charset=\"utf-8\" />\\r\\n    <meta name=\"viewport\" content=\"width=d...            }\\r\\n            iframe.appendTo($(\\'body\\'));\\r\\n        }\\r\\n    </script>\\r\\n\\r\\n</body>\\r\\n</html>\\r\\n'\nf2 = 'D:\\\\pytestproject\\\\test_pytest\\\\result\\\\testdaiban\\\\fd4a86bb-e3ed-4a49-af4f-d9d8cdc91667-attachment.txt'\n\n    def samefile(f1, f2):\n        \"\"\"Test whether two pathnames reference the same actual file\"\"\"\n>       s1 = os.stat(f1)\nE       ValueError: stat: path too long for Windows\n\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\genericpath.py:96: ValueError"}, "attachments": [{"name": "登陆后截图", "source": "e7b25525-e28b-4692-a4ec-2cee226eda1f-attachment.jpg", "type": "image/jpg"}, {"source": "fd4a86bb-e3ed-4a49-af4f-d9d8cdc91667-attachment.txt", "type": "text/plain"}], "start": 1617348104055, "stop": 1617348127238, "uuid": "2c6b9f22-242e-4571-a935-74641b2201db", "historyId": "d6bd1d0d2d8a7c5bec3e30440b84dc17", "testCaseId": "6c650ae3e522ee1b41663684964b9d29", "fullName": "test_daiban.Testdaiban#test_login_daiban", "labels": [{"name": "story", "value": "使用获取到的cookie进行登录"}, {"name": "suite", "value": "test_daiban"}, {"name": "subSuite", "value": "Testdaiban"}, {"name": "host", "value": "SSLT-0046"}, {"name": "thread", "value": "17260-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_daiban"}]}