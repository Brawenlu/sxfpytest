{"name": "test_login", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: './crlist/login.png'", "trace": "self = <test_pytest.test_rclist.Testrclist object at 0x0000000003DBE400>\n\n    @allure.feature(\"模拟登录请求\")\n    def test_login(self):\n        # time.sleep(5)\n        allure.testcase(\"http://cs.tp.sangfor.com/#/testcase/home\",name=\"测试用例连接\")\n        self.driver.find_element_by_xpath(\"//*[@id=\\\"Calc\\\"]/div[1]/div[1]/div/div[1]/input\").send_keys(\"test1\")\n        self.driver.find_element_by_id(\"loginPwd\").send_keys(\"1\")\n        # self.driver.find_element_by_xpath(\"//*[@id=\\\"Calc\\\"]/div[3]/span/div[1]\").click()\n        # self.driver.find_element_by_xpath(\"//*[@id=\\\"Calc\\\"]/div[4]/button\").click()\n        self.driver.implicitly_wait(2)\n        time.sleep(2)\n        # 先点击，再判断是否有提示，如果有，再勾选，再点击,判断是否定位错误\n        # try:\n        #     self.cuowu = self.driver.find_element_by_xpath(\"//*[@id=\\\"Calc\\\"]/div[2]/div\").text\n        #     print(self.cuowu)\n        # except Exception as f:\n        #     print(type(format(f)))\n        #     print(f\"错误xpath参数: {f}\")\n    \n        #先判断是否复选框被勾选，如果没有，判断勾选使用class方法，勾选用xpath，用class可能定位不到，\n        # webelent = self.driver.find_elements_by_class_name(\"checkbox__input\")[0]\n        # print(webelent)\n        if (self.driver.find_elements_by_class_name(\"checkbox__input\")[0]).is_selected():\n            s = (self.driver.find_elements_by_class_name(\"checkbox__input\")[0]).is_selected()\n            print(s)\n            print(\"已经选中默认免责\")\n            self.driver.find_element_by_xpath(\"//*[@id=\\\"Calc\\\"]/div[3]/span/div[1]\").click()\n            # print(self.driver.find_elements_by_class_name(\"checkbox__input\")[0])\n            # self.driver.find_element_by_css_selector(\"#Calc > div.include-box__privacy > span > div.checkbox__label.checkbox--small\").click()  #通过css来定位点击\n            self.driver.find_elements_by_class_name(\"checkbox__label.checkbox--small\")[0].click()  #不能有空格，换成.才可以\n            s = (self.driver.find_elements_by_class_name(\"checkbox__input\")[0]).is_selected()\n            print(s)\n        else:\n            print(\"没有选中默认免责\")\n            s = (self.driver.find_elements_by_class_name(\"checkbox__input\")[0]).is_selected()\n            self.driver.find_element_by_xpath(\"//*[@id=\\\"Calc\\\"]/div[3]/span/div[1]\").click()  #通过xpath来定位选中\n            print(s)\n            # self.driver.find_element_by_xpath(\"//*[@id=\\\"Calc\\\"]/div[3]/span/div[1]\").click()\n        self.driver.find_element_by_xpath(\"//*[@id=\\\"Calc\\\"]/div[4]/button/span\").click()\n        self.driver.implicitly_wait(5)\n        time.sleep(15)\n        self.driver.get_screenshot_as_file(\"./rclist/login.png\")\n>       allure.attach.file(\"./crlist/login.png\",name=\"登录后的截图\",attachment_type=allure.attachment_type.JPG)\n\ntest_rclist.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\allure_commons\\_allure.py:182: in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pluggy\\manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\allure_pytest\\listener.py:226: in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\allure_commons\\reporter.py:114: in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pluggy\\manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\allure_commons\\logger.py:53: in report_attached_file\n    shutil.copy2(source, destination)\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\shutil.py:257: in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsrc = './crlist/login.png', dst = 'D:\\\\pytestproject\\\\test_pytest\\\\rclist\\\\result\\\\910d6d85-0769-41c5-b6c1-38954a6f7e58-attachment.jpg'\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        for fn in [src, dst]:\n            try:\n                st = os.stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n    \n        if not follow_symlinks and os.path.islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc:\nE           FileNotFoundError: [Errno 2] No such file or directory: './crlist/login.png'\n\nc:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\shutil.py:120: FileNotFoundError"}, "attachments": [{"name": "登录后的截图", "source": "910d6d85-0769-41c5-b6c1-38954a6f7e58-attachment.jpg", "type": "image/jpg"}, {"name": "stdout", "source": "484d442b-18af-4a8d-8b61-1eb11de68569-attachment.txt", "type": "text/plain"}], "start": 1619535466289, "stop": 1619535491034, "uuid": "9a580e16-5cda-484e-bd8f-aa94c9dba528", "historyId": "f9c82518f56a514d61a865b557ac3d84", "testCaseId": "e4be329522ae08c78848fb7a1d2b6c92", "fullName": "test_rclist.Testrclist#test_login", "labels": [{"name": "feature", "value": "模拟登录请求"}, {"name": "suite", "value": "test_rclist"}, {"name": "subSuite", "value": "Testrclist"}, {"name": "host", "value": "SSLT-0046"}, {"name": "thread", "value": "33240-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_rclist"}]}